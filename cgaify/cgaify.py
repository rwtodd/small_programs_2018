from PIL import Image

PALETTES = {
    'mono':  [ 0x00,0x00,0x00,  0xFF,0xFF,0xFF ],
    'gray4': [ 0x00,0x00,0x00,  0x55,0x55,0x55,  0xAA,0xAA,0xAA,  0xFF,0xFF,0xFF ],
    'gray16': [0x00,0x00,0x00,  0x11,0x11,0x11,  0x22,0x22,0x22,  0x33,0x33,0x33,  
               0x44,0x44,0x44,  0x55,0x55,0x55,  0x66,0x66,0x66,  0x77,0x77,0x77,  
               0x88,0x88,0x88,  0x99,0x99,0x99,  0xAA,0xAA,0xAA,  0xBB,0xBB,0xBB,  
               0xCC,0xCC,0xCC,  0xDD,0xDD,0xDD,  0xEE,0xEE,0xEE,  0xFF,0xFF,0xFF ],
    'cga0':  [ 0x00,0x00,0x00,  0x00,0xAA,0x00,  0xAA,0x00,0x00,  0xAA,0x55,0x00 ],
    'cga0h': [ 0x00,0x00,0x00,  0x55,0xFF,0x55,  0xFF,0x55,0x55,  0xFF,0xFF,0x55 ],  
    'cga1':  [ 0x00,0x00,0x00,  0x00,0xAA,0xAA,  0xAA,0x00,0xAA,  0xAA,0xAA,0xAA ],
    'cga1h': [ 0x00,0x00,0x00,  0x55,0xFF,0xFF,  0xFF,0x55,0xFF,  0xFF,0xFF,0xFF ],    
    'ega':   [ 0x00,0x00,0x00,  0x00,0x00,0xAA,  0x00,0xAA,0x00,  0x00,0xAA,0xAA,  
               0xAA,0x00,0x00,  0xAA,0x00,0xAA,  0xAA,0x55,0x00,  0xAA,0xAA,0xAA,  
               0x55,0x55,0x55,  0x55,0x55,0xFF,  0x55,0xFF,0x55,  0x55,0xFF,0xFF,  
               0xFF,0x55,0x55,  0xFF,0x55,0xFF,  0xFF,0xFF,0x55,  0xFF,0xFF,0xFF ],
    'vga':   [ 0x00,0x00,0x00,  0x00,0x00,0xAA,  0x00,0xAA,0x00,  0x00,0xAA,0xAA,
               0xAA,0x00,0x00,  0xAA,0x00,0xAA,  0xAA,0x55,0x00,  0xAA,0xAA,0xAA,
               0x55,0x55,0x55,  0x55,0x55,0xFF,  0x55,0xFF,0x55,  0x55,0xFF,0xFF,
               0xFF,0x55,0x55,  0xFF,0x55,0xFF,  0xFF,0xFF,0x55,  0xFF,0xFF,0xFF,
               0x00,0x00,0x00,  0x10,0x10,0x10,  0x20,0x20,0x20,  0x35,0x35,0x35,
               0x45,0x45,0x45,  0x55,0x55,0x55,  0x65,0x65,0x65,  0x75,0x75,0x75,
               0x8A,0x8A,0x8A,  0x9A,0x9A,0x9A,  0xAA,0xAA,0xAA,  0xBA,0xBA,0xBA,
               0xCA,0xCA,0xCA,  0xDF,0xDF,0xDF,  0xEF,0xEF,0xEF,  0xFF,0xFF,0xFF,
               0x00,0x00,0xFF,  0x41,0x00,0xFF,  0x82,0x00,0xFF,  0xBE,0x00,0xFF,
               0xFF,0x00,0xFF,  0xFF,0x00,0xBE,  0xFF,0x00,0x82,  0xFF,0x00,0x41,
               0xFF,0x00,0x00,  0xFF,0x41,0x00,  0xFF,0x82,0x00,  0xFF,0xBE,0x00,
               0xFF,0xFF,0x00,  0xBE,0xFF,0x00,  0x82,0xFF,0x00,  0x41,0xFF,0x00,
               0x00,0xFF,0x00,  0x00,0xFF,0x41,  0x00,0xFF,0x82,  0x00,0xFF,0xBE,
               0x00,0xFF,0xFF,  0x00,0xBE,0xFF,  0x00,0x82,0xFF,  0x00,0x41,0xFF,
               0x82,0x82,0xFF,  0x9E,0x82,0xFF,  0xBE,0x82,0xFF,  0xDF,0x82,0xFF,
               0xFF,0x82,0xFF,  0xFF,0x82,0xDF,  0xFF,0x82,0xBE,  0xFF,0x82,0x9E,
               0xFF,0x82,0x82,  0xFF,0x9E,0x82,  0xFF,0xBE,0x82,  0xFF,0xDF,0x82,
               0xFF,0xFF,0x82,  0xDF,0xFF,0x82,  0xBE,0xFF,0x82,  0x9E,0xFF,0x82,
               0x82,0xFF,0x82,  0x82,0xFF,0x9E,  0x82,0xFF,0xBE,  0x82,0xFF,0xDF,
               0x82,0xFF,0xFF,  0x82,0xDF,0xFF,  0x82,0xBE,0xFF,  0x82,0x9E,0xFF,
               0xBA,0xBA,0xFF,  0xCA,0xBA,0xFF,  0xDF,0xBA,0xFF,  0xEF,0xBA,0xFF,
               0xFF,0xBA,0xFF,  0xFF,0xBA,0xEF,  0xFF,0xBA,0xDF,  0xFF,0xBA,0xCA,
               0xFF,0xBA,0xBA,  0xFF,0xCA,0xBA,  0xFF,0xDF,0xBA,  0xFF,0xEF,0xBA,
               0xFF,0xFF,0xBA,  0xEF,0xFF,0xBA,  0xDF,0xFF,0xBA,  0xCA,0xFF,0xBA,
               0xBA,0xFF,0xBA,  0xBA,0xFF,0xCA,  0xBA,0xFF,0xDF,  0xBA,0xFF,0xEF,
               0xBA,0xFF,0xFF,  0xBA,0xEF,0xFF,  0xBA,0xDF,0xFF,  0xBA,0xCA,0xFF,
               0x00,0x00,0x71,  0x1C,0x00,0x71,  0x39,0x00,0x71,  0x55,0x00,0x71,
               0x71,0x00,0x71,  0x71,0x00,0x55,  0x71,0x00,0x39,  0x71,0x00,0x1C,
               0x71,0x00,0x00,  0x71,0x1C,0x00,  0x71,0x39,0x00,  0x71,0x55,0x00,
               0x71,0x71,0x00,  0x55,0x71,0x00,  0x39,0x71,0x00,  0x1C,0x71,0x00,
               0x00,0x71,0x00,  0x00,0x71,0x1C,  0x00,0x71,0x39,  0x00,0x71,0x55,
               0x00,0x71,0x71,  0x00,0x55,0x71,  0x00,0x39,0x71,  0x00,0x1C,0x71,
               0x39,0x39,0x71,  0x45,0x39,0x71,  0x55,0x39,0x71,  0x61,0x39,0x71,
               0x71,0x39,0x71,  0x71,0x39,0x61,  0x71,0x39,0x55,  0x71,0x39,0x45,
               0x71,0x39,0x39,  0x71,0x45,0x39,  0x71,0x55,0x39,  0x71,0x61,0x39,
               0x71,0x71,0x39,  0x61,0x71,0x39,  0x55,0x71,0x39,  0x45,0x71,0x39,
               0x39,0x71,0x39,  0x39,0x71,0x45,  0x39,0x71,0x55,  0x39,0x71,0x61,
               0x39,0x71,0x71,  0x39,0x61,0x71,  0x39,0x55,0x71,  0x39,0x45,0x71,
               0x51,0x51,0x71,  0x59,0x51,0x71,  0x61,0x51,0x71,  0x69,0x51,0x71,
               0x71,0x51,0x71,  0x71,0x51,0x69,  0x71,0x51,0x61,  0x71,0x51,0x59,
               0x71,0x51,0x51,  0x71,0x59,0x51,  0x71,0x61,0x51,  0x71,0x69,0x51,
               0x71,0x71,0x51,  0x69,0x71,0x51,  0x61,0x71,0x51,  0x59,0x71,0x51,
               0x51,0x71,0x51,  0x51,0x71,0x59,  0x51,0x71,0x61,  0x51,0x71,0x69,
               0x51,0x71,0x71,  0x51,0x69,0x71,  0x51,0x61,0x71,  0x51,0x59,0x71,
               0x00,0x00,0x41,  0x10,0x00,0x41,  0x20,0x00,0x41,  0x31,0x00,0x41,
               0x41,0x00,0x41,  0x41,0x00,0x31,  0x41,0x00,0x20,  0x41,0x00,0x10,
               0x41,0x00,0x00,  0x41,0x10,0x00,  0x41,0x20,0x00,  0x41,0x31,0x00,
               0x41,0x41,0x00,  0x31,0x41,0x00,  0x20,0x41,0x00,  0x10,0x41,0x00,
               0x00,0x41,0x00,  0x00,0x41,0x10,  0x00,0x41,0x20,  0x00,0x41,0x31,
               0x00,0x41,0x41,  0x00,0x31,0x41,  0x00,0x20,0x41,  0x00,0x10,0x41,
               0x20,0x20,0x41,  0x28,0x20,0x41,  0x31,0x20,0x41,  0x39,0x20,0x41,
               0x41,0x20,0x41,  0x41,0x20,0x39,  0x41,0x20,0x31,  0x41,0x20,0x28,
               0x41,0x20,0x20,  0x41,0x28,0x20,  0x41,0x31,0x20,  0x41,0x39,0x20,
               0x41,0x41,0x20,  0x39,0x41,0x20,  0x31,0x41,0x20,  0x28,0x41,0x20,
               0x20,0x41,0x20,  0x20,0x41,0x28,  0x20,0x41,0x31,  0x20,0x41,0x39,
               0x20,0x41,0x41,  0x20,0x39,0x41,  0x20,0x31,0x41,  0x20,0x28,0x41,
               0x2D,0x2D,0x41,  0x31,0x2D,0x41,  0x35,0x2D,0x41,  0x3D,0x2D,0x41,
               0x41,0x2D,0x41,  0x41,0x2D,0x3D,  0x41,0x2D,0x35,  0x41,0x2D,0x31,
               0x41,0x2D,0x2D,  0x41,0x31,0x2D,  0x41,0x35,0x2D,  0x41,0x3D,0x2D,
               0x41,0x41,0x2D,  0x3D,0x41,0x2D,  0x35,0x41,0x2D,  0x31,0x41,0x2D,
               0x2D,0x41,0x2D,  0x2D,0x41,0x31,  0x2D,0x41,0x35,  0x2D,0x41,0x3D,
               0x2D,0x41,0x41,  0x2D,0x3D,0x41,  0x2D,0x35,0x41,  0x2D,0x31,0x41,
               0x00,0x00,0x00,  0x00,0x00,0x00,  0x00,0x00,0x00,  0x00,0x00,0x00,
               0x00,0x00,0x00,  0x00,0x00,0x00,  0x00,0x00,0x00,  0x00,0x00,0x00 ]
}

def full_palette(pal):
    """Extend the given palette to the full 768 bytes..."""
    plen = len(pal)
    if plen == 768: return pal   
    newp = bytearray(768)
    newp[:plen] = pal[:]
    return newp

def cgaify(src, palname):
    """Convert the image in SRC (which can be the image or a filename) to 
       use palette named PALNAME, returning the converted image."""
    if isinstance(src, str):
        img = Image.open(src)
    else:
        img = src
    if img.mode not in ('RGB', 'L'):
        img = img.convert('RGB') 
    fullp = full_palette(PALETTES[palname])
    palimg = Image.new('P',(1,1))
    palimg.putpalette(fullp)
    return img.quantize(palette=palimg)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("src_file", help="the original file")
    parser.add_argument("-p", dest='palette', default='cga0', choices=list(PALETTES.keys()), help="the palette to use")
    args = parser.parse_args()
    img = cgaify(args.src_file, args.palette)
    img.save(f'{args.src_file}_{args.palette}.png')
    img.close()

